require File.expand_path(File.dirname(__FILE__) + '/spec_helper')

describe Cron::Io::Cron do
  let(:uuid)            {`uuidgen`.chomp.gsub('-','') }
  let(:valid_username) {'croniogemY'}
  let(:valid_pwd  ) {'secret'}
  let(:invalid_pwd) {valid_pwd+'ERROR'}

  let(:a_name    ){ "fake job - can be purged"}
  let(:a_url     ){ "http://example.com"      }
  let(:a_schedule){ "46 0 * * *"              }

  describe "#create" do

##########
# SUCCESS
##########

    context "with valid parameters" do

      use_vcr_cassette "create cron/with valid parameters", :record => :new_episodes

      it 'adds 1 cron in my cron.io account' do
        Cron::Io::Cron.list(valid_username, valid_pwd).size.should == 1
        Cron::Io::Cron.create(valid_username, valid_pwd, a_name, a_url, a_schedule)

        Cron::Io::Cron.list(valid_username, valid_pwd).size.should == 2
      end

      describe '' do
        subject { @new_cron = Cron::Io::Cron.create(valid_username, valid_pwd, a_name, a_url, a_schedule) }

        it { should be_a(Cron::Io::Cron) }

        it 'sets the :id to the value generated by cron.io' do
          subject.id.should == "4f5fd63d33d63c3c2000001a"
        end

        it 'sets the :name, :url, and :schedule to the values we sent to cron.io' do
          subject.name    .should == a_name
          subject.url     .should == a_url
          subject.schedule.should == a_schedule
        end
      end
    end



##########
# FAILURE
##########

    context "with invalid credentials" do
      use_vcr_cassette "create cron/with invalid credentials", :record => :new_episodes

      it 'raises a Cron::Io::CredentialsError' do
        expect {
          Cron::Io::Cron.create(valid_username, invalid_pwd, a_name, a_url, a_schedule)
        }.to raise_error Cron::Io::CredentialsError
      end
    end

  end
end