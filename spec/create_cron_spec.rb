require File.expand_path(File.dirname(__FILE__) + '/spec_helper')

describe CronIO::Cron do
  describe "#create" do

    let(:uuid)            {`uuidgen`.chomp.gsub('-','') }
    let(:valid_username) {'croniogemY'}
    let(:valid_pwd  ) {'secret'}
    let(:invalid_pwd) {valid_pwd+'ERROR'}

    let(:a_name    ){ "fake job - can be purged"}
    let(:a_url     ){ "http://example.com"      }
    let(:a_schedule){ "46 0 * * *"              }

##########
# SUCCESS
##########

    it 'adds 1 cron job in my cron.io account' do
      VCR.use_cassette("create cron/with valid parameters", :record => :new_episodes) do
        CronIO::Cron.list(valid_username, valid_pwd).size.should == 1
        CronIO::Cron.create(valid_username, valid_pwd, a_name, a_url, a_schedule)

        CronIO::Cron.list(valid_username, valid_pwd).size.should == 2
      end
    end

    describe "the result" do
      use_vcr_cassette "create cron/with valid parameters", :record => :new_episodes
      subject { @new_cron = CronIO::Cron.create(valid_username, valid_pwd, a_name, a_url, a_schedule) }

      it('is CronIO::Cron object'               ) { subject.should be_a(CronIO::Cron) }
      it('has a unique :id generated by cron.io') { subject.id.should == "4f5fd63d33d63c3c2000001a" }

      it 'sets the :name, :url, and :schedule to the values we sent to cron.io' do
        subject.name    .should == a_name
        subject.url     .should == a_url
        subject.schedule.should == a_schedule
      end
    end


##########
# FAILURE
##########

    it "raises a CronIO::CredentialsError when the credentials are invalid" do
      VCR.use_cassette("create cron/with invalid credentials", :record => :new_episodes) do
        expect {
          CronIO::Cron.create(valid_username, invalid_pwd, a_name, a_url, a_schedule)
        }.to raise_error CronIO::CredentialsError
      end
    end

    it "raises a CronIO::QuotaReachedError is raised when you have reached your jobs quota" do
      VCR.use_cassette("create cron/when quota is reached", :record => :new_episodes) do
        expect {
          CronIO::Cron.create(valid_username, valid_pwd, a_name, a_url, a_schedule)
        }.to raise_error CronIO::QuotaReachedError
      end
    end

  end
end